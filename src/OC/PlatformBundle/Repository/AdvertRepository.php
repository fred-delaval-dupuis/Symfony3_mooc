<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAdvertById($id) {
        return $this
            ->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->leftJoin('a.user', 'u')
            ->addSelect('u')
            ->where('a.id = ?1')
            ->setParameter(1, $id)
            ->getQuery()
            ->getSingleResult()
        ;
    }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->leftJoin('a.user', 'u')
            ->addSelect('u')
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;

        $query
            ->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($query, true);
    }

    /**
     * @return array Toutes les annonces avec leurs candidatures
     */
    public function getAdvertWithApplications()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param array $categoryNames Les catégories que l'annonce doit posséder
     * @return array Le tableau d'entités Advert, résultat de la requête
     */
    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->innerJoin('a.categories', 'c')
            ->addSelect('c')
            ->where($qb->expr()->in('c.name', '?1'))
            ->setParameter(1, $categoryNames)

        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param \DateTime $date La date à partir de laquelle les annonces peuvent être supprimées
     * @return array Le tableau d'objets Advert à supprimer
     */
    public function getAdvertsToPurge(\DateTime $date)
    {
        return $this
            ->createQueryBuilder('a')
            ->where('a.applications IS EMPTY')
            ->andWhere('a.updatedAt <= ?1')
            ->orWhere('a.updatedAt IS NULL AND a.date <= ?1')
            ->setParameter(1, $date)
            ->getQuery()
            ->getResult()
        ;
    }

}
